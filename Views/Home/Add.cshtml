@model TrueStoryMVC.Models.ViewModels.PostModel

<div class="col-9">
    <div class="row">
        <div class="col-12">
            <form enctype="multipart/form-data">
                <div class="row justify-content-end">
                    <div class="form-group col-10">
                        <input id="header-input" class="form-control" placeholder="Введите заголовок" />
                    </div>
                </div>

                <div class="row justify-content-end">
                    <div class="form-group  col-10">
                        <input id="tags-input" placeholder="Введите тэги через пробел" class="form-control" />
                    </div>
                </div>

                <div class="row justify-content-end">
                    <div class="form-group  col-10">
                        <input type="button" value="Отправить" class="btn btn-default" onclick="sendData()"/>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="row justify-content-end">
        <div class="col-5">
            <button onclick="addText()" class="btn btn-default">Добавать текст</button>
        </div>
        <div class="col-5">
            <input type="file" onchange="readFile(this)" accept="image/jpeg,image/jpg,image/png" class="form-control-file" multiple />
        </div>
    </div>

</div>


<script>

    function getCounter() {
        let counter = 0;
        return function () {
            return counter++;
        }
    }
    let count = getCounter();

    function addBinArray(images) {
        return function (img) {
            images.push(img);
            return images;
        }
    }

    function delBinArray(images) {
        return function (id) {
            delete images[id];
        }
    }

    let images = [];
    let addImg = addBinArray(images);
    let delImg = delBinArray(images);

    async function sendData() {
        let text = [];
        let divTextArea = document.getElementsByClassName('someText');

        for (let i = 0; i < divTextArea.length; i++) {
            text.push(divTextArea[i].getElementsByTagName('input')[0].value);
        }

        let scheme = [];
        let rows = document.getElementsByClassName('row');
        for (let i = 0; i < rows.length; i++)
            if (rows[i].hasAttribute('field-type'))
                scheme.push(rows[i].getAttribute('field-type'));

        let header = document.getElementById('header-input').value;
        let tagsline = document.getElementById('tags-input').value;

        console.log(header);
        console.log(tagsline);

        await fetch('/home/CreatePost', {
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ Header: header, Texts: text, Images: images, TagsLine: tagsline, Scheme: scheme })
        });
    }

    function ReadURL(input, i) {
        let file = input.files[i];
        let reader = new FileReader();

        reader.readAsDataURL(file);

        let div = document.createElement("div");
        let img = document.createElement("img");
        reader.onloadend = function () {
            img.src = reader.result;
        }


        div.className = "someImage row";
        div.setAttribute("field-type", "image");
        let number = count();
        div.id = "image-" + number;
        div.setAttribute("number", number);
        let col2 = document.createElement("div");
        col2.className = "col-2";
        let p = document.createElement("p");
        p.innerHTML = 'x';
        p.style.textAlign = "center";

        //сделать более универсальным: поиск по id, а не parent parent
        p.addEventListener("click", (e) => deleteImg(e.target.parentElement.parentElement));
        col2.append(p);
        div.append(col2);
        let col10 = document.createElement("div");
        col10.className = "col-10";
        col10.append(img);
        div.append(col10);

        let form = document.getElementsByTagName('form')[0];
        form.lastElementChild.previousElementSibling.previousElementSibling.after(div);

        img.onload = function () {
            let k = img.height / img.width;
            let width = document.getElementsByClassName("col-10")[0].clientWidth;
            img.width = width;
            img.height = width * k;
        }
    }

    function ReadBinary(input, i) {
        let file = input.files[i];
        let reader = new FileReader();
        reader.readAsArrayBuffer(file);

        reader.onloadend = function () {
            addImg(reader.result);
        }
    }

    function readFile(input) {
        for (let i = 0; i < input.files.length; i++) {
            ReadURL(input, i);
            ReadBinary(input, i);
        }
    }

    function deleteImg(divUpperImg) {
        delImg(divUpperImg.getAttribute("number"));
        divUpperImg.remove();
    }

    function deleteText(divUpperText) {
        divUpperText.remove();
    }

    function addText() {
        let divText = document.createElement("div");
        divText.className = "someText row";
        divText.setAttribute("field-type", "text");

        let col2 = document.createElement("div");
        col2.className = "col-2";
        let p = document.createElement("p");
        p.innerHTML = 'x';
        p.style.textAlign = "center";
        //сделать более универсальным: поиск по id, а не parent parent
        p.addEventListener("click", (e) => deleteText(e.target.parentElement.parentElement));

        col2.append(p);
        divText.append(col2);

        let col10 = document.createElement("div");
        col10.className = "col-10";

        let div = document.createElement("div");
        div.className = "form-group";

        let textarea = document.createElement("input");
        textarea.placeholder = "Введите текст";
        textarea.type = "textarea";
        textarea.className = "form-control";

        div.append(textarea);

        col10.append(div);
        divText.append(col10);

        let form = document.getElementsByTagName('form')[0];
        form.lastElementChild.previousElementSibling.previousElementSibling.after(divText);
    }
</script>

@*0) отпралять на сервер json, после его как-то обрабатывать
    1) При помощи js добавить возможность добавлять новые дивы
    2) При добавлении картинок они должны сразу же отобрадатся, чтобы выглядело так, как это будет при публикации
    3) Автоматически должен заполнятся скрытый input по значению которого можно будет все правильно выставить при публикации*@